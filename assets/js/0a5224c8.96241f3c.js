"use strict";(self.webpackChunkguardian=self.webpackChunkguardian||[]).push([[955],{3905:function(e,n,i){i.d(n,{Zo:function(){return c},kt:function(){return f}});var t=i(7294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=t.createContext({}),l=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},c=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(i),f=a,g=u["".concat(p,".").concat(f)]||u[f]||d[f]||r;return i?t.createElement(g,o(o({ref:n},c),{},{components:i})):t.createElement(g,o({ref:n},c))}));function f(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=i[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},7031:function(e,n,i){i.r(n),i.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var t=i(7462),a=i(3366),r=(i(7294),i(3905)),o=["components"],s={},p="Managing policies",l={unversionedId:"guides/managing-policies",id:"guides/managing-policies",isDocsHomePage:!1,title:"Managing policies",description:"Access can be given to a user after it passed a set of approval steps that we call policy. Guardian lets you configure the policy based on your own governance rules of the data access.",source:"@site/docs/guides/managing-policies.md",sourceDirName:"guides",slug:"/guides/managing-policies",permalink:"/guardian/docs/guides/managing-policies",editUrl:"https://github.com/odpf/guardian/edit/master/docs/docs/guides/managing-policies.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"CLI",permalink:"/guardian/docs/guides/cli"},next:{title:"Managing providers",permalink:"/guardian/docs/guides/managing-providers"}},c=[{value:"Creating Policy",id:"creating-policy",children:[]},{value:"Updating Policy",id:"updating-policy",children:[]}],d={toc:c};function u(e){var n=e.components,i=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,t.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"managing-policies"},"Managing policies"),(0,r.kt)("p",null,"Access can be given to a user after it passed a set of approval steps that we call policy. Guardian lets you configure the policy based on your own governance rules of the data access."),(0,r.kt)("h2",{id:"creating-policy"},"Creating Policy"),(0,r.kt)("p",null,"Creating a policy is the first step required for setting up Guardian in your environment. It is a dependency for the next step which is setting up provider configuration."),(0,r.kt)("p",null,"Policy created by providing a configuration of the approval flow itself. Here\u2019s the example of the configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"id: bigquery_dataset\nsteps:\n  - name: check_if_dataset_is_pii\n    description: pii dataset needs additional approval from the team lead\n    conditions:\n    - field: $resource.details.is_pii\n      match:\n        eq: true\n    allow_failed: true\n  - name: supervisor_approval\n    description: 'only will get evaluated if check_if_dataset_is_pii return true'\n    dependencies: [check_if_dataset_is_pii]\n    approvers: $user_approvers\n  - name: admin_approval\n    description: ...\n    approvers: $resource.details.owner\n")),(0,r.kt)("p",null,"Check ",(0,r.kt)("a",{parentName:"p",href:"/guardian/docs/reference/policy-config"},"policy reference")," for more details on the policy configuration"),(0,r.kt)("p",null,"To create a policy, you can use this endpoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'POST /policies\nAccept: application/json\n\nRequest Body:\nid: bigquery_dataset\nsteps:\n  - name: check_if_dataset_is_pii\n    description: pii dataset needs additional approval from the team lead\n    conditions:\n    - field: $resource.details.is_pii\n      match:\n        eq: true\n    allow_failed: true\n  - name: supervisor_approval\n    description: \'only will get evaluated if check_if_dataset_is_pii return true\'\n    dependencies: [check_if_dataset_is_pii]\n    approvers: $user_approvers\n  - name: admin_approval\n    description: ...\n    approvers: $resource.details.owner\n\nResponse:\n{\n  "id": "bigquery_dataset",\n  "version": 1,\n  "description": "",\n  "steps": [\n    {\n      "name": "check_if_dataset_is_pii",\n      "description": "pii dataset needs additional approval from the team lead",\n      "conditions": [\n        {\n          "field": "$resource.details.is_pii",\n          "match": {\n            "eq": true\n          }\n        }\n      ],\n      "allow_failed": true,\n      "dependencies": null,\n      "approvers": ""\n    },\n    {\n      "name": "supervisor_approval",\n      "description": "only will get evaluated if check_if_dataset_is_pii return true",\n      "conditions": null,\n      "allow_failed": false,\n      "dependencies": [\n        "check_if_dataset_is_pii"\n      ],\n      "approvers": "$user_approvers"\n    },\n    {\n      "name": "admin_approval",\n      "description": "...",\n      "conditions": null,\n      "allow_failed": false,\n      "dependencies": null,\n      "approvers": "$resource.details.owner"\n    }\n  ],\n  "labels": null,\n  "created_at": "2021-05-04T08:05:07.691557+07:00",\n  "updated_at": "2021-05-04T08:05:07.691557+07:00"\n}\n')),(0,r.kt)("h2",{id:"updating-policy"},"Updating Policy"),(0,r.kt)("p",null,"In Guardian, we keep track of the policy changes using the policy version which generated after you create/update a policy. This version tracking will help Guardian in case you updated the policy, the existing appeals that were created using the previous version would still be able to retrieve the matching policy version."),(0,r.kt)("p",null,"By updating a policy, Guardian will automatically bump up the version of that particular policy. For example, if the current version of policy ",(0,r.kt)("inlineCode",{parentName:"p"},"bigquery_dataset")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", the version will automatically get increased to ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," when it gets updated."),(0,r.kt)("p",null,"To update a policy, you can use this endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'PUT /policies/:id\nAccept: application/json\n\nRequest Body:\nid: bigquery_dataset\nsteps:\n  - name: check_if_dataset_is_pii\n    description: pii dataset needs additional approval from the team lead\n    conditions:\n    - field: $resource.details.is_pii\n      match:\n        eq: true\n    allow_failed: true\n  - name: supervisor_approval\n    description: \'only will get evaluated if check_if_dataset_is_pii return true\'\n    dependencies: [check_if_dataset_is_pii]\n    approvers: $user_approvers\n  - name: admin_approval\n    description: ...\n    approvers: $resource.details.owners\n\n\nResponse:\n{\n  "id": "bigquery_dataset",\n  "version": 2,\n  "description": "",\n  "steps": [\n    {\n      "name": "check_if_dataset_is_pii",\n      "description": "pii dataset needs additional approval from the team lead",\n      "conditions": [\n        {\n          "field": "$resource.details.is_pii",\n          "match": {\n            "eq": true\n          }\n        }\n      ],\n      "allow_failed": true,\n      "dependencies": null,\n      "approvers": ""\n    },\n    {\n      "name": "supervisor_approval",\n      "description": "only will get evaluated if check_if_dataset_is_pii return true",\n      "conditions": null,\n      "allow_failed": false,\n      "dependencies": [\n        "check_if_dataset_is_pii"\n      ],\n      "approvers": "$user_approvers"\n    },\n    {\n      "name": "admin_approval",\n      "description": "...",\n      "conditions": null,\n      "allow_failed": false,\n      "dependencies": null,\n      "approvers": "$resource.details.owners"\n    }\n  ],\n  "labels": null,\n  "created_at": "2021-05-04T08:05:07.691557+07:00",\n  "updated_at": "2021-05-04T08:05:07.691557+07:00"\n}\n')))}u.isMDXComponent=!0}}]);